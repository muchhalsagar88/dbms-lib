--Run the following query and use the output of the query as drop scripts

--SELECT 'DROP '||OBJECT_TYPE||' '||OBJECT_NAME||DECODE(OBJECT_TYPE,'TABLE', ' CASCADE CONSTRAINTS;', ';') FROM USER_OBJECTS;


CREATE TABLE login_details (USERNAME VARCHAR2(255) NOT NULL, PASSWORD VARCHAR2(255) NULL, patron_id VARCHAR2(255) NOT NULL, PRIMARY KEY (USERNAME));
CREATE TABLE patron (patron_id VARCHAR2(255) NOT NULL, patron_type CHAR(1), email_address VARCHAR2(255) NULL, first_name VARCHAR2(255) NULL, HOLD CHAR(1) DEFAULT 'N', last_name VARCHAR2(255) NULL, NATIONALITY VARCHAR2(255) NULL, DEPARTMENT_ID NUMBER(19) NULL, PRIMARY KEY (patron_id));
CREATE TABLE student (student_id VARCHAR2(255) NOT NULL, alt_phone_no VARCHAR2(255) NULL, dob DATE NULL, phone_no VARCHAR2(255) NOT NULL, SEX CHAR(1) NULL, ADDRESSLINEONE VARCHAR2(255) NULL, ADDRESSLINETWO VARCHAR2(255) NULL, CITYNAME VARCHAR2(255) NULL, PINCODE NUMBER(10) NULL, DEGREEYEAR_degree_year_id NUMBER(19) NULL, PRIMARY KEY (student_id));
CREATE TABLE library (library_id NUMBER(19) NOT NULL, library_name VARCHAR2(255) NULL, ADDRESSLINEONE VARCHAR2(255) NULL, ADDRESSLINETWO VARCHAR2(255) NULL, CITYNAME VARCHAR2(255) NULL, PINCODE NUMBER(10) NULL, PRIMARY KEY (library_id));
CREATE TABLE faculty (faculty_id VARCHAR2(255) NOT NULL, CATEGORY_ID NUMBER(19) NULL, PRIMARY KEY (faculty_id));
CREATE TABLE faculty_category (ID NUMBER(19) NOT NULL, NAME VARCHAR2(255) NULL, PRIMARY KEY (ID));
CREATE TABLE department (ID NUMBER(19) NOT NULL, dept_name VARCHAR2(255) NULL, PRIMARY KEY (ID));
CREATE TABLE author (ID VARCHAR2(255) NOT NULL, NAME VARCHAR2(255) NULL, PRIMARY KEY (ID));
CREATE TABLE publisher (ID NUMBER(10) NOT NULL, NAME VARCHAR2(255) NULL, PRIMARY KEY (ID));
CREATE TABLE asset (asset_id VARCHAR2(255) NOT NULL, asset_type NUMBER(31) NULL, library_id NUMBER(19) NOT NULL, PRIMARY KEY (asset_id));
CREATE TABLE publication (publication_id VARCHAR2(255) NOT NULL, PUBLICATIONFORMAT VARCHAR2(255) NULL, PRIMARY KEY (publication_id));
CREATE TABLE book (book_id VARCHAR2(255) NOT NULL, isbn_number VARCHAR2(255) NULL, PRIMARY KEY (book_id));
CREATE TABLE book_detail (isbn_number VARCHAR2(255) NOT NULL, EDITION VARCHAR2(255) NULL, PUBLICATIONYEAR NUMBER(10) NULL, TITLE VARCHAR2(255) NULL, PUBLISHER_ID NUMBER(10) NULL, PRIMARY KEY (isbn_number));
CREATE TABLE camera (camera_id VARCHAR2(255) NOT NULL, camera_detail_id VARCHAR2(255) NULL, PRIMARY KEY (camera_id));
CREATE TABLE camera_detail (camera_detail_id VARCHAR2(255) NOT NULL, LENSDETAIL VARCHAR2(255) NULL, MAKER VARCHAR2(255) NULL, MEMORYAVAILABLE NUMBER(10) NULL, MODEL VARCHAR2(255) NULL, PRIMARY KEY (camera_detail_id));
CREATE TABLE conf_proceeding (conf_proc_id VARCHAR2(255) NOT NULL, conf_num VARCHAR2(255) NULL, PRIMARY KEY (conf_proc_id));
CREATE TABLE conference_proceeding_detail (conf_num VARCHAR2(255) NOT NULL, CONFERENCENAME VARCHAR2(255) NULL, TITLE VARCHAR2(255) NULL, pub_year NUMBER(10) NULL, PRIMARY KEY (conf_num));
CREATE TABLE journal (journal_id VARCHAR2(255) NOT NULL, issn_number VARCHAR2(255) NULL, PRIMARY KEY (journal_id));
CREATE TABLE journal_detail (issn_number VARCHAR2(255) NOT NULL, PUBLICATIONYEAR NUMBER(10) NULL, TITLE VARCHAR2(255) NULL, PRIMARY KEY (issn_number));
CREATE TABLE room (room_id VARCHAR2(255) NOT NULL, CAPACITY NUMBER(10) NULL, FLOORLEVEL NUMBER(10) NULL, ROOMNO VARCHAR2(255) NULL, PRIMARY KEY (room_id));
CREATE TABLE study_room (study_room_id VARCHAR2(255) NOT NULL, PRIMARY KEY (study_room_id));
CREATE TABLE conference_room (conf_room_id VARCHAR2(255) NOT NULL, PRIMARY KEY (conf_room_id));
CREATE TABLE classification (ID NUMBER(19) NOT NULL, NAME VARCHAR2(255) NULL, PRIMARY KEY (ID));
CREATE TABLE degree_program (ID NUMBER(19) NOT NULL, NAME VARCHAR2(255) NULL, CLASSIFICATION_ID NUMBER(19) NULL, PRIMARY KEY (ID));
CREATE TABLE year (ID NUMBER(19) NOT NULL, NAME VARCHAR2(255) NULL, PRIMARY KEY (ID));
CREATE TABLE degree_year (degree_year_id NUMBER(19) NOT NULL, degree_program_id NUMBER(19) NULL, year_id NUMBER(19) NULL, PRIMARY KEY (degree_year_id));
CREATE TABLE asset_patron_constraint (DURATION NUMBER(10) NULL, FINE NUMBER(19,4) NULL, fine_duration NUMBER(10) NULL, patron_type CHAR(1), asset_type_id NUMBER(10) NOT NULL, PRIMARY KEY (patron_type, asset_type_id));
CREATE TABLE asset_type (ASSETTYPEID NUMBER(10) NOT NULL, CATEGORY VARCHAR2(255) NULL, sub_category VARCHAR2(255) NULL, PRIMARY KEY (ASSETTYPEID));
CREATE TABLE course (ID NUMBER(19) NOT NULL, course_name VARCHAR2(255) NULL, PRIMARY KEY (ID));
CREATE TABLE reserve_book (from_date DATE NULL, toDate DATE NULL, book_isbn VARCHAR2(255) NOT NULL, course_id NUMBER(19) NOT NULL, faculty_id VARCHAR2(255) NOT NULL, PRIMARY KEY (book_isbn, course_id, faculty_id));
CREATE TABLE asset_checkout (ID NUMBER(19) NOT NULL, asset_secondary_id VARCHAR2(255) NULL, due_date TIMESTAMP NULL, fine NUMBER(19,4) NULL, issue_date TIMESTAMP NULL, return_date TIMESTAMP NULL, ASSET_asset_id VARCHAR2(255) NULL, patron_id VARCHAR2(255) NULL, PRIMARY KEY (ID));
CREATE TABLE asset_checkout_constraint (asset_secondary_id VARCHAR2(255) NOT NULL, patron_id VARCHAR2(255) NOT NULL, ASSETCHECKOUT_ID NUMBER(19) NULL, PRIMARY KEY (asset_secondary_id, patron_id));
CREATE TABLE room_reservation (RESERVATION_ID NUMBER(19) NOT NULL, end_time TIMESTAMP NULL, reserve_time TIMESTAMP NULL, start_time TIMESTAMP NULL, patron_id VARCHAR2(255) NULL, ROOM_asset_id VARCHAR2(255) NULL, checkout_id NUMBER(19) NULL, PRIMARY KEY (RESERVATION_ID));
CREATE TABLE camera_reservation (reserve_date TIMESTAMP NULL, reservation_status VARCHAR2(20) DEFAULT 'ACTIVE', issue_date TIMESTAMP NOT NULL, camera_id VARCHAR2(255) NOT NULL, patron_id VARCHAR2(255) NOT NULL, checkout_id NUMBER(19) NULL, PRIMARY KEY (issue_date, camera_id, patron_id));
CREATE TABLE publication_waitlist (is_student NUMBER(10) NULL, request_date TIMESTAMP NULL, end_time TIMESTAMP NULL, start_time TIMESTAMP NULL, pub_secondary_id VARCHAR2(255) NOT NULL, patron_id VARCHAR2(255) NOT NULL, PRIMARY KEY (pub_secondary_id, patron_id));
CREATE TABLE enroll (student_id VARCHAR2(255) NOT NULL, course_id NUMBER(19) NOT NULL, PRIMARY KEY (student_id, course_id));
CREATE TABLE teach (faculty_id VARCHAR2(255) NOT NULL, course_id NUMBER(19) NOT NULL, PRIMARY KEY (faculty_id, course_id));
CREATE TABLE BOOK_AUTHOR (AUTHOR_ID VARCHAR2(255) NOT NULL, BOOK_ID VARCHAR2(255) NOT NULL, PRIMARY KEY (AUTHOR_ID, BOOK_ID));
CREATE TABLE CONF_PROC_AUTHOR (AUTHOR_ID VARCHAR2(255) NOT NULL, CONF_NUM VARCHAR2(255) NOT NULL, PRIMARY KEY (AUTHOR_ID, CONF_NUM));
CREATE TABLE JOURNAL_AUTHOR (AUTHOR_ID VARCHAR2(255) NOT NULL, JOURNAL_ID VARCHAR2(255) NOT NULL, PRIMARY KEY (AUTHOR_ID, JOURNAL_ID));
ALTER TABLE degree_year ADD CONSTRAINT UNQ_degree_year_0 UNIQUE (degree_program_id, year_id);
ALTER TABLE login_details ADD CONSTRAINT FK_login_details_patron_id FOREIGN KEY (patron_id) REFERENCES patron (patron_id);
ALTER TABLE patron ADD CONSTRAINT FK_patron_DEPARTMENT_ID FOREIGN KEY (DEPARTMENT_ID) REFERENCES department (ID);
ALTER TABLE student ADD CONSTRAINT studentDEGREEYEARdegreeyear_id FOREIGN KEY (DEGREEYEAR_degree_year_id) REFERENCES degree_year (degree_year_id);
ALTER TABLE student ADD CONSTRAINT FK_student_student_id FOREIGN KEY (student_id) REFERENCES patron (patron_id);
ALTER TABLE faculty ADD CONSTRAINT FK_faculty_faculty_id FOREIGN KEY (faculty_id) REFERENCES patron (patron_id);
ALTER TABLE faculty ADD CONSTRAINT FK_faculty_CATEGORY_ID FOREIGN KEY (CATEGORY_ID) REFERENCES faculty_category (ID);
ALTER TABLE asset ADD CONSTRAINT FK_asset_library_id FOREIGN KEY (library_id) REFERENCES library (library_id);
ALTER TABLE publication ADD CONSTRAINT FK_publication_publication_id FOREIGN KEY (publication_id) REFERENCES asset (asset_id);
ALTER TABLE book ADD CONSTRAINT FK_book_book_id FOREIGN KEY (book_id) REFERENCES asset (asset_id);
ALTER TABLE book ADD CONSTRAINT FK_book_isbn_number FOREIGN KEY (isbn_number) REFERENCES book_detail (isbn_number);
ALTER TABLE book_detail ADD CONSTRAINT FK_book_detail_PUBLISHER_ID FOREIGN KEY (PUBLISHER_ID) REFERENCES publisher (ID);
ALTER TABLE camera ADD CONSTRAINT FK_camera_camera_id FOREIGN KEY (camera_id) REFERENCES asset (asset_id);
ALTER TABLE camera ADD CONSTRAINT FK_camera_camera_detail_id FOREIGN KEY (camera_detail_id) REFERENCES camera_detail (camera_detail_id);
ALTER TABLE conf_proceeding ADD CONSTRAINT conf_proceeding_conf_proc_id FOREIGN KEY (conf_proc_id) REFERENCES asset (asset_id);
ALTER TABLE conf_proceeding ADD CONSTRAINT FK_conf_proceeding_conf_num FOREIGN KEY (conf_num) REFERENCES conference_proceeding_detail (conf_num);
ALTER TABLE journal ADD CONSTRAINT FK_journal_issn_number FOREIGN KEY (issn_number) REFERENCES journal_detail (issn_number);
ALTER TABLE journal ADD CONSTRAINT FK_journal_journal_id FOREIGN KEY (journal_id) REFERENCES asset (asset_id);
ALTER TABLE room ADD CONSTRAINT FK_room_room_id FOREIGN KEY (room_id) REFERENCES asset (asset_id);
ALTER TABLE study_room ADD CONSTRAINT FK_study_room_study_room_id FOREIGN KEY (study_room_id) REFERENCES asset (asset_id);
ALTER TABLE conference_room ADD CONSTRAINT conference_room_conf_room_id FOREIGN KEY (conf_room_id) REFERENCES asset (asset_id);
ALTER TABLE degree_program ADD CONSTRAINT degreeprogramCLASSIFICATION_ID FOREIGN KEY (CLASSIFICATION_ID) REFERENCES classification (ID);
ALTER TABLE degree_year ADD CONSTRAINT FK_degree_year_year_id FOREIGN KEY (year_id) REFERENCES year (ID);
ALTER TABLE degree_year ADD CONSTRAINT degree_year_degree_program_id FOREIGN KEY (degree_program_id) REFERENCES degree_program (ID);
ALTER TABLE reserve_book ADD CONSTRAINT FK_reserve_book_course_id FOREIGN KEY (course_id) REFERENCES course (ID);
ALTER TABLE reserve_book ADD CONSTRAINT FK_reserve_book_faculty_id FOREIGN KEY (faculty_id) REFERENCES patron (patron_id);
ALTER TABLE asset_checkout ADD CONSTRAINT asset_checkout_ASSET_asset_id FOREIGN KEY (ASSET_asset_id) REFERENCES asset (asset_id);
ALTER TABLE asset_checkout ADD CONSTRAINT FK_asset_checkout_patron_id FOREIGN KEY (patron_id) REFERENCES patron (patron_id);
ALTER TABLE asset_checkout_constraint ADD CONSTRAINT ssetcheckoutconstraintpatronid FOREIGN KEY (patron_id) REFERENCES patron (patron_id);
ALTER TABLE asset_checkout_constraint ADD CONSTRAINT sstchckutconstraintSSTCHCKUTID FOREIGN KEY (ASSETCHECKOUT_ID) REFERENCES asset_checkout (ID);
ALTER TABLE room_reservation ADD CONSTRAINT FK_room_reservation_patron_id FOREIGN KEY (patron_id) REFERENCES patron (patron_id);
ALTER TABLE room_reservation ADD CONSTRAINT room_reservation_ROOM_asset_id FOREIGN KEY (ROOM_asset_id) REFERENCES asset (asset_id);
ALTER TABLE room_reservation ADD CONSTRAINT room_reservation_checkout_id FOREIGN KEY (checkout_id) REFERENCES asset_checkout (ID);
ALTER TABLE camera_reservation ADD CONSTRAINT camera_reservation_checkout_id FOREIGN KEY (checkout_id) REFERENCES asset_checkout (ID);
ALTER TABLE camera_reservation ADD CONSTRAINT camera_reservation_camera_id FOREIGN KEY (camera_id) REFERENCES asset (asset_id);
ALTER TABLE camera_reservation ADD CONSTRAINT camera_reservation_patron_id FOREIGN KEY (patron_id) REFERENCES patron (patron_id);
ALTER TABLE publication_waitlist ADD CONSTRAINT publication_waitlist_patron_id FOREIGN KEY (patron_id) REFERENCES patron (patron_id);
ALTER TABLE enroll ADD CONSTRAINT FK_enroll_course_id FOREIGN KEY (course_id) REFERENCES course (ID);
ALTER TABLE enroll ADD CONSTRAINT FK_enroll_student_id FOREIGN KEY (student_id) REFERENCES patron (patron_id);
ALTER TABLE teach ADD CONSTRAINT FK_teach_faculty_id FOREIGN KEY (faculty_id) REFERENCES patron (patron_id);
ALTER TABLE teach ADD CONSTRAINT FK_teach_course_id FOREIGN KEY (course_id) REFERENCES course (ID);
ALTER TABLE BOOK_AUTHOR ADD CONSTRAINT FK_BOOK_AUTHOR_AUTHOR_ID FOREIGN KEY (AUTHOR_ID) REFERENCES author (ID);
ALTER TABLE BOOK_AUTHOR ADD CONSTRAINT FK_BOOK_AUTHOR_BOOK_ID FOREIGN KEY (BOOK_ID) REFERENCES book_detail (isbn_number);
ALTER TABLE CONF_PROC_AUTHOR ADD CONSTRAINT FK_CONF_PROC_AUTHOR_AUTHOR_ID FOREIGN KEY (AUTHOR_ID) REFERENCES author (ID);
ALTER TABLE CONF_PROC_AUTHOR ADD CONSTRAINT FK_CONF_PROC_AUTHOR_CONF_NUM FOREIGN KEY (CONF_NUM) REFERENCES conference_proceeding_detail (conf_num);
ALTER TABLE JOURNAL_AUTHOR ADD CONSTRAINT FK_JOURNAL_AUTHOR_AUTHOR_ID FOREIGN KEY (AUTHOR_ID) REFERENCES author (ID);
ALTER TABLE JOURNAL_AUTHOR ADD CONSTRAINT FK_JOURNAL_AUTHOR_JOURNAL_ID FOREIGN KEY (JOURNAL_ID) REFERENCES journal_detail (issn_number);
CREATE TABLE SEQUENCE (SEQ_NAME VARCHAR2(50) NOT NULL, SEQ_COUNT NUMBER(38) NULL, PRIMARY KEY (SEQ_NAME));
INSERT INTO SEQUENCE(SEQ_NAME, SEQ_COUNT) values ('SEQ_GEN', 0);
CREATE SEQUENCE SEQ_GEN_IDENTITY START WITH 1;
CREATE SEQUENCE SEQ_GEN_SEQUENCE INCREMENT BY 1 START WITH 50;


 CREATE TABLE NOTIFICATION
   (	ID VARCHAR2(255 BYTE) NOT NULL ENABLE, 
	ISREAD NUMBER(10,0), 
	NOTIFICATION VARCHAR2(255 BYTE), 
	PATRON_PATRON_ID VARCHAR2(255 BYTE), 
	 PRIMARY KEY (ID), 
	 CONSTRAINT NOTIFICATION_PATRON_PATRON_ID FOREIGN KEY (PATRON_PATRON_ID)
	  REFERENCES PATRON (PATRON_ID) ENABLE
   );


--ALTER TABLE ENROLL
--  DROP CONSTRAINT FK_ENROLL_STUDENT_ID;


--ALTER TABLE ENROLL ADD (
--  CONSTRAINT FK_ENROLL_STUDENT_ID 
--  FOREIGN KEY (STUDENT_ID) 
--  REFERENCES PATRON (PATRON_ID)
--  ENABLE VALIDATE);


ALTER TABLE ENROLL
  DROP CONSTRAINT FK_ENROLL_STUDENT_ID;


ALTER TABLE ENROLL ADD (
  CONSTRAINT FK_ENROLL_STUDENT_ID 
  FOREIGN KEY (STUDENT_ID) 
  REFERENCES STUDENT (STUDENT_ID)
  ENABLE VALIDATE);


--ALTER TABLE TEACH
--  DROP CONSTRAINT FK_TEACH_FACULTY_ID;


--ALTER TABLE TEACH ADD (
--  CONSTRAINT FK_TEACH_FACULTY_ID 
--  FOREIGN KEY (FACULTY_ID) 
--  REFERENCES PATRON (PATRON_ID)
--  ENABLE VALIDATE);



ALTER TABLE TEACH
  DROP CONSTRAINT FK_TEACH_FACULTY_ID;


ALTER TABLE TEACH ADD (
  CONSTRAINT FK_TEACH_FACULTY_ID 
  FOREIGN KEY (FACULTY_ID) 
  REFERENCES FACULTY (FACULTY_ID)
  ENABLE VALIDATE);


ALTER TABLE ASSET ADD 
CONSTRAINT FK_ASSET_TYPE
 FOREIGN KEY (ASSET_TYPE)
 REFERENCES ASSET_TYPE (ASSETTYPEID)
 ENABLE
 VALIDATE;


CREATE TABLE PATRON_TYPE
(
  PATRON_TYPE_ID  CHAR(1 BYTE)              NOT NULL,
  DESCRIPTION     VARCHAR2(50 BYTE)             NOT NULL
);


ALTER TABLE PATRON_TYPE ADD (
  CONSTRAINT PATRON_TYPE_PK
  PRIMARY KEY
  (PATRON_TYPE_ID)
  ENABLE VALIDATE);


ALTER TABLE ASSET_PATRON_CONSTRAINT ADD 
CONSTRAINT ASSET_PATRON_CONSTRAINT_P_TYPE
 FOREIGN KEY (PATRON_TYPE)
 REFERENCES PATRON_TYPE (PATRON_TYPE_ID)
 ENABLE
 VALIDATE;


ALTER TABLE PATRON ADD 
CONSTRAINT FK_PATRON_TYPE
 FOREIGN KEY (PATRON_TYPE)
 REFERENCES PATRON_TYPE (PATRON_TYPE_ID)
 ENABLE
 VALIDATE;


ALTER TABLE ASSET_PATRON_CONSTRAINT ADD 
CONSTRAINT FK_ASSET_P_C_ASSET_TYPE
 FOREIGN KEY (ASSET_TYPE_ID)
 REFERENCES ASSET_TYPE (ASSETTYPEID)
 ENABLE
 VALIDATE;

CREATE OR REPLACE FUNCTION MY_HASH(X IN VARCHAR2, y IN NUMBER, z IN NUMBER) RETURN NUMBER IS
  RETVAL NUMBER;
BEGIN
  SELECT ORA_HASH(X,y,z) INTO RETVAL FROM DUAL;
  RETURN RETVAL;
END;
/

CREATE OR REPLACE TRIGGER LOGIN_PASSWORD
BEFORE INSERT OR UPDATE
OF PASSWORD
ON LOGIN_DETAILS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
  :new.PASSWORD := MY_HASH(:new.PASSWORD, 100000, 57643);
END;
/



CREATE OR REPLACE TRIGGER UPD_ASSET_CK_CSTRN
AFTER INSERT OR UPDATE
OF RETURN_DATE
ON ASSET_CHECKOUT
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
BEGIN
      IF UPDATING THEN
        IF :new.RETURN_DATE IS NOT NULL THEN
            DELETE FROM ASSET_CHECKOUT_CONSTRAINT ACC WHERE ACC.ASSETCHECKOUT_ID = :new.ID;
        END IF;
      ELSIF INSERTING THEN
        IF :new.RETURN_DATE IS NULL AND :new.ASSET_SECONDARY_ID IS NOT NULL THEN
            INSERT INTO ASSET_CHECKOUT_CONSTRAINT(ASSETCHECKOUT_ID, PATRON_ID, ASSET_SECONDARY_ID) VALUES (:new.ID, :new.PATRON_ID, :new.ASSET_SECONDARY_ID);
        END IF;
      END IF;
END;
/

show errors TRIGGER UPD_ASSET_CK_CSTRN;


CREATE OR REPLACE TRIGGER NO_CONF_ROOM_HILL
BEFORE INSERT OR UPDATE
ON ASSET
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
cnt INTEGER;
BEGIN
        SELECT COUNT(*) INTO cnt FROM LIBRARY LIB, ASSET_TYPE AST WHERE AST.ASSETTYPEID = :new.ASSET_TYPE AND AST.SUB_CATEGORY = 'Conference Room' AND UPPER(LIB.LIBRARY_NAME) LIKE '%D%H%HILL%' AND LIB.LIBRARY_ID = :new.LIBRARY_ID;
        IF cnt > 0 THEN
            RAISE_APPLICATION_ERROR(-20013, 'NO_CNF_ROOM_IN_HILL');
        END IF;
END;
/

show errors TRIGGER NO_CONF_ROOM_HILL;


CREATE OR REPLACE TRIGGER NO_CONF_ROOM_STUDENT
BEFORE INSERT OR UPDATE
ON ROOM_RESERVATION
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
cnt INTEGER;
BEGIN
        SELECT COUNT(*) INTO cnt FROM PATRON PT, ASSET_TYPE AST, ASSET ASS, PATRON_TYPE PTT WHERE ASS.ASSET_ID = :new.ROOM_ASSET_ID AND AST.ASSETTYPEID = ASS.ASSET_TYPE AND AST.SUB_CATEGORY = 'Conference Room' AND PT.PATRON_ID = :new.PATRON_ID AND PT.PATRON_TYPE = PTT.PATRON_TYPE_ID AND PTT.DESCRIPTION = 'Student' ;
        IF cnt > 0 THEN
            RAISE_APPLICATION_ERROR(-20013, 'NO_CONF_ROOM_STUDENT');
        END IF;
END;
/


show errors TRIGGER NO_CONF_ROOM_STUDENT;


ALTER TABLE AUTHOR ADD 
CONSTRAINT AUTHOR_U01
 UNIQUE (NAME)
 ENABLE
 VALIDATE;
 
ALTER TABLE AUTHOR ADD 
CONSTRAINT AUTHOR_C01
 CHECK (NAME IS NOT NULL)
 ENABLE
 VALIDATE;

ALTER TABLE CLASSIFICATION ADD 
CONSTRAINT CLASSIFICATION_U01
 UNIQUE (NAME)
 ENABLE
 VALIDATE;
 
ALTER TABLE CLASSIFICATION ADD 
CONSTRAINT CLASSIFICATION_C01
 CHECK (NAME IS NOT NULL AND LOWER(NAME) IN ('undergraduate','postgraduate','graduate'))
 ENABLE
 VALIDATE;


ALTER TABLE COURSE ADD 
CONSTRAINT COURSE_U01
 UNIQUE (COURSE_NAME)
 ENABLE
 VALIDATE;
 
ALTER TABLE COURSE ADD 
CONSTRAINT COURSE_C01
 CHECK (COURSE_NAME IS NOT NULL)
 ENABLE
 VALIDATE;
 

ALTER TABLE DEGREE_PROGRAM ADD 
CONSTRAINT DEGREE_PROGRAM_U01
 UNIQUE (NAME)
 ENABLE
 VALIDATE;
 
ALTER TABLE DEGREE_PROGRAM ADD 
CONSTRAINT DEGREE_PROGRAM_C01
 CHECK (NAME IS NOT NULL)
 ENABLE
 VALIDATE;
 

ALTER TABLE FACULTY_CATEGORY ADD 
CONSTRAINT FACULTY_CATEGORY_U01
 UNIQUE (NAME)
 ENABLE
 VALIDATE;
 
ALTER TABLE FACULTY_CATEGORY ADD 
CONSTRAINT FACULTY_CATEGORY_C01
 CHECK (NAME IS NOT NULL)
 ENABLE
 VALIDATE;


ALTER TABLE LIBRARY ADD 
CONSTRAINT LIBRARY_U01
 UNIQUE (LIBRARY_NAME)
 ENABLE
 VALIDATE;
 
ALTER TABLE LIBRARY ADD 
CONSTRAINT LIBRARY_C01
 CHECK (LIBRARY_NAME IS NOT NULL)
 ENABLE
 VALIDATE;

ALTER TABLE LOGIN_DETAILS ADD 
CONSTRAINT LOGIN_DETAILS_U01
 UNIQUE (PATRON_ID)
 ENABLE
 VALIDATE;
 
ALTER TABLE LOGIN_DETAILS ADD 
CONSTRAINT LOGIN_DETAILS_C01
 CHECK (PATRON_ID IS NOT NULL)
 ENABLE
 VALIDATE;

ALTER TABLE LOGIN_DETAILS ADD 
CONSTRAINT LOGIN_DETAILS_C02
 CHECK (PASSWORD IS NOT NULL)
 ENABLE
 VALIDATE;

ALTER TABLE PATRON ADD 
CONSTRAINT PATRON_C01
 CHECK (PATRON_TYPE IS NOT NULL)
 ENABLE
 VALIDATE;

ALTER TABLE PATRON ADD 
CONSTRAINT PATRON_C02
 CHECK (EMAIL_ADDRESS IS NOT NULL)
 ENABLE
 VALIDATE;

ALTER TABLE PATRON ADD 
CONSTRAINT PATRON_U01
 UNIQUE (EMAIL_ADDRESS)
 ENABLE
 VALIDATE;


ALTER TABLE PATRON ADD 
CONSTRAINT PATRON_C03
 CHECK (FIRST_NAME IS NOT NULL)
 ENABLE
 VALIDATE;


ALTER TABLE PATRON ADD 
CONSTRAINT PATRON_C04
 CHECK (NATIONALITY IS NOT NULL)
 ENABLE
 VALIDATE;


ALTER TABLE PATRON ADD 
CONSTRAINT PATRON_C05
 CHECK (DEPARTMENT_ID IS NOT NULL)
 ENABLE
 VALIDATE;

ALTER TABLE PATRON ADD 
CONSTRAINT PATRON_C06
 CHECK (HOLD IN ('Y','N'))
 ENABLE
 VALIDATE;

ALTER TABLE ROOM ADD 
CONSTRAINT ROOM_C01
 CHECK (FLOORLEVEL IS NOT NULL)
 ENABLE
 VALIDATE;
 
ALTER TABLE ROOM ADD 
CONSTRAINT ROOM_C02
 CHECK (FLOORLEVEL BETWEEN 0 AND 100)
 ENABLE
 VALIDATE;


ALTER TABLE ROOM ADD 
CONSTRAINT ROOM_C03
 CHECK (ROOMNO IS NOT NULL)
 ENABLE
 VALIDATE;
 

ALTER TABLE ROOM ADD 
CONSTRAINT ROOM_U01
 UNIQUE(ROOMNO)
 ENABLE
 VALIDATE;

 
ALTER TABLE ROOM ADD 
CONSTRAINT ROOM_C04
 CHECK (CAPACITY IS NOT NULL)
 ENABLE
 VALIDATE;
 

ALTER TABLE ROOM ADD 
CONSTRAINT ROOM_C05
 CHECK (CAPACITY BETWEEN 1 AND 25)
 ENABLE
 VALIDATE;


ALTER TABLE STUDENT ADD 
CONSTRAINT STUDENT_C01
 CHECK (DOB IS NOT NULL)
 ENABLE
 VALIDATE;
 
--ALTER TABLE STUDENT ADD 
--CONSTRAINT STUDENT_-01
-- CHECK (TO_DATE(DOB) < SYSDATE)
-- ENABLE
-- VALIDATE; 

ALTER TABLE STUDENT ADD 
CONSTRAINT STUDENT_C_PHNO
 CHECK (PHONE_NO IS NOT NULL)
 ENABLE
 VALIDATE;
 

ALTER TABLE STUDENT ADD 
CONSTRAINT STUDENT_C_SEX
 CHECK (SEX IS NOT NULL)
 ENABLE
 VALIDATE;
 

ALTER TABLE STUDENT ADD 
CONSTRAINT STUDENT_C03
 CHECK (SEX IN ('M','F'))
 ENABLE
 VALIDATE;
 

ALTER TABLE STUDENT ADD 
CONSTRAINT STUDENT_C04
 CHECK (ADDRESSLINEONE IS NOT NULL)
 ENABLE
 VALIDATE;
 

ALTER TABLE STUDENT ADD 
CONSTRAINT STUDENT_C05
 CHECK (CITYNAME IS NOT NULL)
 ENABLE
 VALIDATE;
 

ALTER TABLE STUDENT ADD 
CONSTRAINT STUDENT_C06
 CHECK (PINCODE IS NOT NULL)
 ENABLE
 VALIDATE;
 

ALTER TABLE STUDENT ADD 
CONSTRAINT STUDENT_C07
 CHECK (PINCODE BETWEEN 1000 AND 999999)
 ENABLE
 VALIDATE;
 

ALTER TABLE STUDENT ADD 
CONSTRAINT STUDENT_C08
 CHECK (DEGREEYEAR_DEGREE_YEAR_ID IS NOT NULL)
 ENABLE
 VALIDATE;


ALTER TABLE YEAR ADD 
CONSTRAINT YEAR_C01
 CHECK (NAME IS NOT NULL)
 ENABLE
 VALIDATE;


ALTER TABLE YEAR ADD 
CONSTRAINT YEAR_U01
 UNIQUE (NAME)
 ENABLE
 VALIDATE;


ALTER TABLE YEAR ADD 
CONSTRAINT YEAR_C02
 CHECK (LOWER(NAME) IN ('first year','second year','third year','fourth year','fifth year','sixth year'))
 ENABLE
 VALIDATE;

ALTER TABLE PUBLICATION ADD
CONSTRAINT PUBLICATION_C01
  CHECK (PUBLICATIONFORMAT IN ('Physical copy','Electronic copy'))
 ENABLE
 VALIDATE;
 
CREATE OR REPLACE VIEW min_reservation_view (camera_id, issue_date, min_reserve_date) AS 
  SELECT c.camera_Id as id, c.issue_Date, MIN(c.reserve_Date) as res_date
				FROM Camera_Reservation c
				WHERE c.reservation_status='ACTIVE'
        GROUP BY c.camera_Id, c.issue_date;



CREATE OR REPLACE FUNCTION TS_DIFF_IN_HRS(END_TIME IN TIMESTAMP, START_TIME IN TIMESTAMP, DO_ROUND IN INTEGER) RETURN NUMBER IS
  RETVAL NUMBER;
BEGIN
  IF DO_ROUND < 0 THEN
  SELECT FLOOR(EXTRACT (DAY FROM (END_TIME-START_TIME))*24 + EXTRACT (HOUR FROM (END_TIME-START_TIME))) DELTA INTO RETVAL FROM DUAL;
  ELSIF DO_ROUND > 0 THEN
  SELECT CEIL(EXTRACT (DAY FROM (END_TIME-START_TIME))*24 + EXTRACT (HOUR FROM (END_TIME-START_TIME))) DELTA INTO RETVAL FROM DUAL;
  ELSE
  SELECT EXTRACT (DAY    FROM (END_TIME-START_TIME))*24  + EXTRACT (HOUR FROM (END_TIME-START_TIME)) DELTA INTO RETVAL FROM DUAL;
  END IF;
  RETURN RETVAL;
END;
/


CREATE OR REPLACE VIEW FINE_SNAPSHOT
(ISSUE_DATE, DUE_DATE, PATRON_ID, PATRON_TYPE, MAX_ALLOWED_DURATION, 
 TODAY, OVER_DUE_HRS, OVER_DUE_TIME_Q, FINE_AMOUNT, FINE_PER_TIME_Q, 
 TIME_Q_HRS, CHECKOUT_ID, EMAIL_ADDRESS, FIRST_NAME, LAST_NAME)
AS 
SELECT ISSUE_DATE,
       DUE_DATE,
       P.PATRON_ID,
       P.PATRON_TYPE,
       DURATION MAX_ALLOWED_DURATION,
       SYSDATE TODAY,
       CASE WHEN TS_DIFF_IN_HRS(NVL(RETURN_DATE,SYSDATE), DUE_DATE, 1) < 0 THEN 0 ELSE TS_DIFF_IN_HRS(NVL(RETURN_DATE,SYSDATE), DUE_DATE, 1) END OVER_DUE_HRS,
       CASE WHEN TS_DIFF_IN_HRS(NVL(RETURN_DATE,SYSDATE), DUE_DATE, 1) < 0 THEN 0 ELSE CEIL(TS_DIFF_IN_HRS(NVL(RETURN_DATE,SYSDATE), DUE_DATE, 1)/FINE_DURATION) END OVER_DUE_TIME_Q,
       CASE WHEN TS_DIFF_IN_HRS(NVL(RETURN_DATE,SYSDATE), DUE_DATE, 1) < 0 THEN 0 ELSE APC.FINE*CEIL(TS_DIFF_IN_HRS(NVL(RETURN_DATE,SYSDATE), DUE_DATE, 1)/FINE_DURATION) END FINE_AMOUNT,
       APC.FINE FINE_PER_TIME_Q,
       FINE_DURATION TIME_Q_HRS,
       AC.ID CHECKOUT_ID,
       P.EMAIL_ADDRESS,
       P.FIRST_NAME,
       P.LAST_NAME
FROM
    ASSET A,
    ASSET_PATRON_CONSTRAINT APC,
    ASSET_CHECKOUT AC,
    PATRON P
WHERE
    A.ASSET_TYPE = APC.ASSET_TYPE_ID
    AND A.ASSET_ID = AC.ASSET_ASSET_ID
    AND P.PATRON_ID = AC.PATRON_ID
    AND P.PATRON_TYPE = APC.PATRON_TYPE
	AND APC.FINE <> 0
    AND (AC.RETURN_DATE IS NULL OR (AC.RETURN_DATE IS NOT NULL AND AC.FINE > 0 ));


CREATE OR REPLACE VIEW DUE_IN_NEXT_24_HRS AS 
SELECT P.FIRST_NAME, 
       P.LAST_NAME,
       P.EMAIL_ADDRESS,
       ISSUE_DATE,
       DUE_DATE,
       SYSDATE TODAY, 
       P.PATRON_ID, 
       P.PATRON_TYPE, 
       AC.ID CHECKOUT_ID,
       A.ASSET_ID,
       (SELECT 'Camera: "' || MAKER || ' ' || MODEL || '"'  FROM
            CAMERA C, 
            CAMERA_DETAIL CD 
        WHERE (C.CAMERA_ID = A.ASSET_ID AND C.CAMERA_DETAIL_ID = CD.CAMERA_DETAIL_ID)
        UNION
        SELECT 'Journal: "' || TITLE || '"'  FROM
            JOURNAL J, 
            JOURNAL_DETAIL JD 
        WHERE (J.ISSN_NUMBER = JD.ISSN_NUMBER AND J.JOURNAL_ID = A.ASSET_ID)
        UNION
        SELECT 'Conference Proceeding: "' || TITLE || '"'  FROM
            CONF_PROCEEDING CP, 
            CONFERENCE_PROCEEDING_DETAIL CPD 
        WHERE (CP.CONF_NUM = CPD.CONF_NUM AND CP.CONF_PROC_ID = A.ASSET_ID)
        UNION
        SELECT 'Book: "' || TITLE || '"' FROM
            BOOK B, 
            BOOK_DETAIL BD 
        WHERE (B.ISBN_NUMBER = BD.ISBN_NUMBER AND B.BOOK_ID = A.ASSET_ID)) ASSET_NAME
FROM 
    ASSET A, 
    ASSET_CHECKOUT AC,
    PATRON P
WHERE
    A.ASSET_ID = AC.ASSET_ASSET_ID
    AND P.PATRON_ID = AC.PATRON_ID
    AND AC.RETURN_DATE IS NULL
    AND A.ASSET_TYPE NOT IN (SELECT ASSETTYPEID FROM ASSET_TYPE AT WHERE AT.CATEGORY = 'Room')
    AND DUE_DATE < SYSDATE+1
    AND DUE_DATE > SYSDATE;


CREATE OR REPLACE VIEW DUE_IN_NEXT_3_DAYS AS 
SELECT P.FIRST_NAME, 
       P.LAST_NAME,
       P.EMAIL_ADDRESS,
       ISSUE_DATE,
       DUE_DATE,
       SYSDATE TODAY, 
       P.PATRON_ID, 
       P.PATRON_TYPE, 
       AC.ID CHECKOUT_ID,
       A.ASSET_ID,
       (SELECT 'Camera: "' || MAKER || ' ' || MODEL || '"'  FROM
            CAMERA C, 
            CAMERA_DETAIL CD 
        WHERE (C.CAMERA_ID = A.ASSET_ID AND C.CAMERA_DETAIL_ID = CD.CAMERA_DETAIL_ID)
        UNION
        SELECT 'Journal: "' || TITLE || '"'  FROM
            JOURNAL J, 
            JOURNAL_DETAIL JD 
        WHERE (J.ISSN_NUMBER = JD.ISSN_NUMBER AND J.JOURNAL_ID = A.ASSET_ID)
        UNION
        SELECT 'Conference Proceeding: "' || TITLE || '"'  FROM
            CONF_PROCEEDING CP, 
            CONFERENCE_PROCEEDING_DETAIL CPD 
        WHERE (CP.CONF_NUM = CPD.CONF_NUM AND CP.CONF_PROC_ID = A.ASSET_ID)
        UNION
        SELECT 'Book: "' || TITLE || '"' FROM
            BOOK B, 
            BOOK_DETAIL BD 
        WHERE (B.ISBN_NUMBER = BD.ISBN_NUMBER AND B.BOOK_ID = A.ASSET_ID)) ASSET_NAME
FROM 
    ASSET A, 
    ASSET_CHECKOUT AC,
    PATRON P
WHERE
    A.ASSET_ID = AC.ASSET_ASSET_ID
    AND P.PATRON_ID = AC.PATRON_ID
    AND AC.RETURN_DATE IS NULL
    AND A.ASSET_TYPE NOT IN (SELECT ASSETTYPEID FROM ASSET_TYPE AT WHERE AT.CATEGORY = 'Room')
    AND DUE_DATE < SYSDATE+3
    AND DUE_DATE > SYSDATE+2;


CREATE OR REPLACE FUNCTION FINE_FOR_PATRON(P_ID IN VARCHAR2) RETURN NUMBER IS
  RETVAL NUMBER;
BEGIN
  SELECT NVL(SUM(FINE_AMOUNT),0) INTO RETVAL FROM FINE_SNAPSHOT WHERE PATRON_ID = P_ID;
  RETURN RETVAL;
END;
/

SHOW ERRORS;

CREATE OR REPLACE TRIGGER NO_STUDENT_FACULTY
BEFORE INSERT OR UPDATE
ON STUDENT
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
cnt INTEGER;
BEGIN
        SELECT COUNT(*) INTO cnt FROM FACULTY WHERE FACULTY_ID = :new.STUDENT_ID;
        IF cnt > 0 THEN
            RAISE_APPLICATION_ERROR(-20014, 'STUDENT_AND_FACULTY_ARE_DISJOINT');
        END IF;
END;
/

SHOW ERRORS;

CREATE OR REPLACE TRIGGER NO_FACULTY_STUDENT
BEFORE INSERT OR UPDATE
ON FACULTY
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
cnt INTEGER;
BEGIN
        SELECT COUNT(*) INTO cnt FROM STUDENT WHERE STUDENT_ID = :new.FACULTY_ID;
        IF cnt > 0 THEN
            RAISE_APPLICATION_ERROR(-20015, 'STUDENT_AND_FACULTY_ARE_DISJOINT');
        END IF;
END;
/

SHOW ERRORS;

CREATE OR REPLACE TRIGGER ASSET_DUE_DATE
BEFORE INSERT OR UPDATE
ON ASSET_CHECKOUT
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
cnt INTEGER;
dueDate TIMESTAMP;
atype INTEGER;
BEGIN
    SELECT DURATION,ASSET_TYPE_ID INTO cnt,atype FROM ASSET A, ASSET_PATRON_CONSTRAINT APC, PATRON P
    WHERE A.ASSET_TYPE = APC.ASSET_TYPE_ID AND APC.PATRON_TYPE = P.PATRON_TYPE AND P.PATRON_ID = :new.PATRON_ID
    AND A.ASSET_ID = :new.ASSET_ASSET_ID;
    IF atype = 1 OR atype = 2 OR atype = 3 OR atype = 4 THEN
        dueDate := :new.ISSUE_DATE + (cnt/24);
    ELSIF atype = 5 OR atype = 6 THEN
        IF EXTRACT(HOUR FROM :new.ISSUE_DATE) >= 21 THEN
            dueDate := TO_DATE(TO_CHAR(:new.ISSUE_DATE,'MM/DD/YYYY'),'MM/DD/YYYY')+1;
        ELSE
            SELECT MAX(END_TIME) into dueDate FROM ROOM_RESERVATION WHERE ROOM_ASSET_ID = :new.ASSET_ASSET_ID AND PATRON_ID = :new.PATRON_ID AND START_TIME = :new.ISSUE_DATE;  
        END IF;
    ELSIF atype = 7 THEN
           dueDate := NEXT_DAY (TO_DATE(TO_CHAR(:new.ISSUE_DATE,'MM/DD/YYYY'),'MM/DD/YYYY'), 'THU')+(18/24);
    END IF;
    :new.DUE_DATE := dueDate;
END;
/


SHOW ERRORS;


CREATE OR REPLACE TRIGGER DISJOINT_ASSET_01
BEFORE INSERT OR UPDATE
ON BOOK
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
study INTEGER;
confR INTEGER;
books INTEGER;
journals INTEGER;
cps INTEGER;
cameras INTEGER;
cnt INTEGER;
atid INTEGER;
BEGIN
        books:=0;
        SELECT COUNT(*) INTO cameras FROM CAMERA WHERE CAMERA_ID = :new.BOOK_ID;
        SELECT COUNT(*) INTO journals FROM JOURNAL WHERE JOURNAL_ID = :new.BOOK_ID;
        SELECT COUNT(*) INTO cps FROM CONF_PROCEEDING WHERE CONF_PROC_ID = :new.BOOK_ID;
        SELECT COUNT(*) INTO study FROM STUDY_ROOM WHERE STUDY_ROOM_ID = :new.BOOK_ID;
        SELECT COUNT(*) INTO confR FROM CONFERENCE_ROOM WHERE CONF_ROOM_ID = :new.BOOK_ID;
        cnt := study + confR + books + journals + cps + cameras;
        IF cnt > 0 THEN
            RAISE_APPLICATION_ERROR(-20015, 'ASSET CAN NOT FALL IN MULTIPLE CATEGORY');
        ELSE
            SELECT ASSETTYPEID INTO atid FROM ASSET_TYPE WHERE UPPER(SUB_CATEGORY) = 'BOOK';
            UPDATE ASSET SET ASSET_TYPE = atid WHERE ASSET_ID = :new.BOOK_ID;
        END IF;
END;
/

SHOW ERRORS;

CREATE OR REPLACE TRIGGER DISJOINT_ASSET_02
BEFORE INSERT OR UPDATE
ON CAMERA
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
study INTEGER;
confR INTEGER;
books INTEGER;
journals INTEGER;
cps INTEGER;
cameras INTEGER;
cnt INTEGER;
atid INTEGER;
BEGIN
        SELECT COUNT(*) INTO books FROM BOOK WHERE BOOK_ID = :new.CAMERA_ID;
        cameras :=0;
        SELECT COUNT(*) INTO journals FROM JOURNAL WHERE JOURNAL_ID = :new.CAMERA_ID;
        SELECT COUNT(*) INTO cps FROM CONF_PROCEEDING WHERE CONF_PROC_ID = :new.CAMERA_ID;
        SELECT COUNT(*) INTO study FROM STUDY_ROOM WHERE STUDY_ROOM_ID = :new.CAMERA_ID;
        SELECT COUNT(*) INTO confR FROM CONFERENCE_ROOM WHERE CONF_ROOM_ID = :new.CAMERA_ID;
        cnt := study + confR + books + journals + cps + cameras;
        IF cnt > 0 THEN
            RAISE_APPLICATION_ERROR(-20015, 'ASSET CAN NOT FALL IN MULTIPLE CATEGORY');
        ELSE
            SELECT ASSETTYPEID INTO atid FROM ASSET_TYPE WHERE UPPER(SUB_CATEGORY) = 'CAMERA';
            UPDATE ASSET SET ASSET_TYPE = atid WHERE ASSET_ID = :new.CAMERA_ID;
        END IF;
END;
/

SHOW ERRORS;


CREATE OR REPLACE TRIGGER DISJOINT_ASSET_03
BEFORE INSERT OR UPDATE
ON JOURNAL
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
study INTEGER;
confR INTEGER;
books INTEGER;
journals INTEGER;
cps INTEGER;
cameras INTEGER;
cnt INTEGER;
atid INTEGER;
BEGIN
        SELECT COUNT(*) INTO books FROM BOOK WHERE BOOK_ID = :new.JOURNAL_ID;
        SELECT COUNT(*) INTO cameras FROM CAMERA WHERE CAMERA_ID = :new.JOURNAL_ID;
        journals:=0;
        SELECT COUNT(*) INTO cps FROM CONF_PROCEEDING WHERE CONF_PROC_ID = :new.JOURNAL_ID;
        SELECT COUNT(*) INTO study FROM STUDY_ROOM WHERE STUDY_ROOM_ID = :new.JOURNAL_ID;
        SELECT COUNT(*) INTO confR FROM CONFERENCE_ROOM WHERE CONF_ROOM_ID = :new.JOURNAL_ID;
        cnt := study + confR + books + journals + cps + cameras;
        IF cnt > 0 THEN
            RAISE_APPLICATION_ERROR(-20015, 'ASSET CAN NOT FALL IN MULTIPLE CATEGORY');
        ELSE
            SELECT ASSETTYPEID INTO atid FROM ASSET_TYPE WHERE UPPER(SUB_CATEGORY) = 'JOURNAL';
            UPDATE ASSET SET ASSET_TYPE = atid WHERE ASSET_ID = :new.JOURNAL_ID;
        END IF;
END;
/

SHOW ERRORS;


CREATE OR REPLACE TRIGGER DISJOINT_ASSET_04
BEFORE INSERT OR UPDATE
ON CONF_PROCEEDING
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
study INTEGER;
confR INTEGER;
books INTEGER;
journals INTEGER;
cps INTEGER;
cameras INTEGER;
cnt INTEGER;
atid INTEGER;
BEGIN
        SELECT COUNT(*) INTO books FROM BOOK WHERE BOOK_ID = :new.CONF_PROC_ID;
        SELECT COUNT(*) INTO cameras FROM CAMERA WHERE CAMERA_ID = :new.CONF_PROC_ID;
        SELECT COUNT(*) INTO journals FROM JOURNAL WHERE JOURNAL_ID = :new.CONF_PROC_ID;
        cps:=0;
        SELECT COUNT(*) INTO study FROM STUDY_ROOM WHERE STUDY_ROOM_ID = :new.CONF_PROC_ID;
        SELECT COUNT(*) INTO confR FROM CONFERENCE_ROOM WHERE CONF_ROOM_ID = :new.CONF_PROC_ID;
        cnt := study + confR + books + journals + cps + cameras;
        IF cnt > 0 THEN
            RAISE_APPLICATION_ERROR(-20015, 'ASSET CAN NOT FALL IN MULTIPLE CATEGORY');
        ELSE
            SELECT ASSETTYPEID INTO atid FROM ASSET_TYPE WHERE UPPER(SUB_CATEGORY) = 'CONFERENCEPROCEEDING';
            UPDATE ASSET SET ASSET_TYPE = atid WHERE ASSET_ID = :new.CONF_PROC_ID;
        END IF;
END;
/

SHOW ERRORS;

CREATE OR REPLACE TRIGGER DISJOINT_ASSET_05
BEFORE INSERT OR UPDATE
ON STUDY_ROOM
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
study INTEGER;
confR INTEGER;
books INTEGER;
journals INTEGER;
cps INTEGER;
cameras INTEGER;
cnt INTEGER;
atid INTEGER;
BEGIN
        SELECT COUNT(*) INTO books FROM BOOK WHERE BOOK_ID = :new.STUDY_ROOM_ID;
        SELECT COUNT(*) INTO cameras FROM CAMERA WHERE CAMERA_ID = :new.STUDY_ROOM_ID;
        SELECT COUNT(*) INTO journals FROM JOURNAL WHERE JOURNAL_ID = :new.STUDY_ROOM_ID;
        SELECT COUNT(*) INTO cps FROM CONF_PROCEEDING WHERE CONF_PROC_ID = :new.STUDY_ROOM_ID;
        study:=0;
        SELECT COUNT(*) INTO confR FROM CONFERENCE_ROOM WHERE CONF_ROOM_ID = :new.STUDY_ROOM_ID;
        cnt := study + confR + books + journals + cps + cameras;
        IF cnt > 0 THEN
            RAISE_APPLICATION_ERROR(-20015, 'ASSET CAN NOT FALL IN MULTIPLE CATEGORY');
        ELSE
            SELECT ASSETTYPEID INTO atid FROM ASSET_TYPE WHERE UPPER(SUB_CATEGORY) = 'STUDY ROOM';
            UPDATE ASSET SET ASSET_TYPE = atid WHERE ASSET_ID = :new.STUDY_ROOM_ID;
        END IF;
END;
/

SHOW ERRORS;
	
CREATE OR REPLACE TRIGGER DISJOINT_ASSET_06
BEFORE INSERT OR UPDATE
ON CONFERENCE_ROOM
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
study INTEGER;
confR INTEGER;
books INTEGER;
journals INTEGER;
cps INTEGER;
cameras INTEGER;
cnt INTEGER;
atid INTEGER;
BEGIN
        SELECT COUNT(*) INTO books FROM BOOK WHERE BOOK_ID = :new.CONF_ROOM_ID;
        SELECT COUNT(*) INTO cameras FROM CAMERA WHERE CAMERA_ID = :new.CONF_ROOM_ID;
        SELECT COUNT(*) INTO journals FROM JOURNAL WHERE JOURNAL_ID = :new.CONF_ROOM_ID;
        SELECT COUNT(*) INTO cps FROM CONF_PROCEEDING WHERE CONF_PROC_ID = :new.CONF_ROOM_ID;
        SELECT COUNT(*) INTO study FROM STUDY_ROOM WHERE STUDY_ROOM_ID = :new.CONF_ROOM_ID;
        confR:=0;
        cnt := study + confR + books + journals + cps + cameras;
        IF cnt > 0 THEN
            RAISE_APPLICATION_ERROR(-20015, 'ASSET CAN NOT FALL IN MULTIPLE CATEGORY');
        ELSE
            SELECT ASSETTYPEID INTO atid FROM ASSET_TYPE WHERE UPPER(SUB_CATEGORY) = 'CONFERENCE ROOM';
            UPDATE ASSET SET ASSET_TYPE = atid WHERE ASSET_ID = :new.CONF_ROOM_ID;
        END IF;
END;
/

SHOW ERRORS;

CREATE OR REPLACE TRIGGER T_RESERVER_BOOK
AFTER INSERT OR UPDATE
ON RESERVE_BOOK
REFERENCING NEW AS new OLD AS old
FOR EACH ROW
DECLARE
atid INTEGER;
BEGIN
    SELECT ASSETTYPEID INTO atid FROM ASSET_TYPE WHERE UPPER(SUB_CATEGORY) = 'RESERVED BOOK';
    UPDATE ASSET set ASSET_TYPE = atid WHERE ASSET_ID IN (SELECT BOOK_ID FROM BOOK WHERE ISBN_NUMBER = :new.BOOK_ISBN) AND ASSET_ID NOT IN (SELECT PUBLICATION_ID FROM PUBLICATION WHERE PUBLICATIONFORMAT = 'Electronic copy');
END;
/

SHOW ERRORS;

CREATE OR REPLACE VIEW ongoing_checkouts (ID, DUE_DATE, ISSUE_DATE, RETURN_DATE, ASSET_ID, PATRON_ID) AS
  SELECT c.ID, c.DUE_DATE, c.ISSUE_DATE, c.RETURN_DATE, c.ASSET_ASSET_ID, c.PATRON_ID 
  FROM Asset_Checkout c 
  WHERE c.Due_Date < SYSDATE
    AND c.Return_Date IS NULL;

ALTER TABLE CAMERA_DETAIL ADD 
CONSTRAINT CAMERA_DETAIL_U01
 UNIQUE (MODEL, MEMORYAVAILABLE, MAKER, LENSDETAIL)
 ENABLE
 VALIDATE;
 
EXIT;

